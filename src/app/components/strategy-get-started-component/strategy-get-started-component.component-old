import { Component, OnInit, ViewChild } from '@angular/core';


import { NgbTypeahead, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { Observable, Subject, merge } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';

import { pipe } from 'rxjs';
import { NgZone } from "@angular/core";
import * as am4core from "@amcharts/amcharts4/core";
import * as am4charts from "@amcharts/amcharts4/charts";
import am4themes_animated from "@amcharts/amcharts4/themes/animated";

am4core.useTheme(am4themes_animated);

@Component({
  selector: 'app-strategy-get-started-component',
  templateUrl: './strategy-get-started-component.component.html',
  styleUrls: ['./strategy-get-started-component.component.css']
})
export class StrategyGetStartedComponentComponent implements OnInit {


  datemodel: NgbDateStruct;
  lotQty: any = 0;
  private chart: am4charts.XYChart;

  stockmodel:any;
  stockArray=[];
  segmentsmodel:any;
  segmentsArray=[];
  expirymodel:any;
  expiryArray=[];
  optionStrikemodel:any;
  optionStrikeArray=[];
  optionTypemodel:any;
  optionTypeArray=[];


  constructor(private zone: NgZone) { }

  ngOnInit() {
    this.getSegmentsArray()
    this.getStockArray()
    this.getExpiryArray()
    this.getOptionStrikeArray()
    this.getoptionTypeArray()
  }

  getStockArray(){
    this.stockArray=[
      {
        value:'NIFTY',
        label:'NIFTY'
      },
      {
        value:'BANKNIFTY',
        label:'BANKNIFTY'
      },
      {
        value:'ACC',
        label:'ACC'
      },
      {
        value:'ADANIPORTS',
        label:'ADANIPORTS'
      },
      {
        value:'ADANIPOWERS',
        label:'ADANIPOWERS'
      },
      {
        value:'AMBUJACEM',
        label:'AMBUJACEM'
      },
      {
        value:'APOLLOHOSP',
        label:'APOLLOHOSP'
      },
      {
        value:'APOLLOTYRE',
        label:'APOLLOTYRE'
      }
    ]
  }

  getSegmentsArray(){
    this.segmentsArray=[
      {
        value:'Futures',
        label:'Futures'
      },
      {
        value:'Options',
        label:'Options'
      }
    ]
  }

  getExpiryArray(){
    this.expiryArray=[
      {
        value:'21MAY2020',
        label:'21MAY2020'
      },
      {
        value:'21MAY2020',
        label:'21MAY2020'
      },
      {
        value:'4JUN2020',
        label:'4JUN2020'
      },
      {
        value:'25JUN2020',
        label:'25JUN2020'
      },
      {
        value:'30JUL2020',
        label:'30JUL2020'
      }
    ]
  }

  getOptionStrikeArray(){
    this.optionStrikeArray=[
      {
        value:'6100',
        label:'6100'
      },
      {
        value:'6200',
        label:'6200'
      },
      {
        value:'6300',
        label:'6300'
      },
      {
        value:'6400',
        label:'6400'
      },
      {
        value:'6500',
        label:'6500'
      },
      {
        value:'6600',
        label:'6600'
      },
      {
        value:'6700',
        label:'6700'
      },
      {
        value:'6800',
        label:'6800'
      }
    ]
  }

  getoptionTypeArray(){

    this.optionTypeArray=[
      {
        value:'CE',
        label:'CE'
      },
      {
        value:'PE',
        label:'PE'
      }
    ]

  }


  decrement() {
    if (this.lotQty == 0) {
      this.lotQty = 0
    } else {
      this.lotQty = this.lotQty - 1
    }
  }
  increment() {
    this.lotQty = this.lotQty + 1
  }

  ngAfterViewInit() {
    this.zone.runOutsideAngular(() => {
      let chart = am4core.create("chartdiv", am4charts.XYChart);

      // Add data
      chart.data = generatechartData();
      function generatechartData() {
        let chartData = [];
        let firstDate = new Date();
        firstDate.setDate(firstDate.getDate() - 150);
        let visits = -40;
        let b = 0.6;
        for ( var i = 0; i < 150; i++ ) {
          // we create date objects here. In your data, you can have date strings
          // and then set format of your dates using chart.dataDateFormat property,
          // however when possible, use date objects, as this will speed up chart rendering.
          let newDate = new Date( firstDate );
          newDate.setDate( newDate.getDate() + i );
          if(i > 80){
              b = 0.4;
          }
          visits += Math.round((Math.random()<b?1:-1)*Math.random()*10);

          chartData.push( {
            date: newDate,
            visits: visits
          } );
        }
        console.log('chartData------------>', chartData)
        return chartData;
      }

      // Create axes
      let dateAxis = chart.xAxes.push(new am4charts.ValueAxis());
      dateAxis.startLocation = 0.5;
      dateAxis.endLocation = 0.5;

      // Create value axis
      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

      // Create series
      let series = chart.series.push(new am4charts.LineSeries());
      series.dataFields.valueY = "Final";
      series.dataFields.valueX = "StockPrice";
      series.strokeWidth = 3;
      series.tooltipText = "{valueY.value}";
      series.fillOpacity = 0.1;

      // Create a range to change stroke for values below 0
      let range = valueAxis.createSeriesRange(series);
      range.value = 0;
      range.endValue = -300000;
      range.contents.stroke = chart.colors.getIndex(4);
      range.contents.fill = range.contents.stroke;
      range.contents.strokeOpacity = 0.7;
      range.contents.fillOpacity = 0.1;

      // Add cursor
      chart.cursor = new am4charts.XYCursor();
      chart.cursor.xAxis = dateAxis;
      chart.scrollbarX = new am4core.Scrollbar();

      series.tooltip.getFillFromObject = false;
      // series.columns.adapter.add("x", (x, target)=>{
      //   console.log('x-------',x)
      //   console.log('target--------------',target)
      // })
    });
  }

  ngOnDestroy() {
    this.zone.runOutsideAngular(() => {
      if (this.chart) {
        this.chart.dispose();
      }
    });
  }
}
